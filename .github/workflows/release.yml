name: Release

on:
  workflow_dispatch:
    inputs:
      branch:
        type: string
        description: Which branch to use to build the release
        required: true

jobs:
  build:
    name: Build package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Set up base Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install and upgrade build tools
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade build
      - name: Build the package
        run: python -m build --verbose --outdir $RUNNER_TEMP/dist
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-latest
          path: ${{ runner.temp }}/dist
          if-no-files-found: error
          overwrite: true
  test:
    name: Test package
    needs: build
    defaults:
      run:
        # Use Bash by default to avoid complications - PowerShell and Bash have
        # different syntax for environment variables.
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    env:
      # Set the Python version that `uv` will use for its virtual environment.
      UV_PYTHON: ${{ matrix.python-version }}
      # Disable implicitly syncing before running - we want to install only from the
      # built wheel, not from the project.
      UV_NO_SYNC: true
    steps:
      - name: Check out only the test files
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          # Only check out the test files; this ensures we don't get any
          # cross-contamination from the source code.
          sparse-checkout: |
            tests/**
            examples/**
          # Don't check out any files other than those specified above. (If this is
          # set to true, it checks out files in the repo root as well.)
          sparse-checkout-cone-mode: false
      - name: Download built package
        uses: actions/download-artifact@v4
        with:
         name: build-latest
         path: ${{ runner.temp }}/dist
      - name: Get wheel filename to install
        run: |
          # Save a list of all wheel files found in the downloaded artifact
          find $RUNNER_TEMP/dist -type f -name '*.whl' > $RUNNER_TEMP/wheel_filename.txt
          cat $RUNNER_TEMP/wheel_filename.txt
          # Check that we only found one wheel file (we pipe the input in via cat to
          # avoid printing the file name, so we can test against it)
          test $(cat $RUNNER_TEMP/wheel_filename.txt | wc -l) -eq 1
          # Save its location to an environment variable
          echo "WHEEL_FILENAME=$(<$RUNNER_TEMP/wheel_filename.txt)" >> $GITHUB_ENV
      - name: Set up uv cache directory location
        run: echo "UV_CACHE_DIR=${{ runner.temp }}/.uv-cache" >> $GITHUB_ENV
      - name: Restore uv cache (read-only)
        # We don't save the cache here, as we expect this job to be run only very
        # infrequently.
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}-${{ matrix.python-version }}-test
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}-${{ matrix.python-version }}
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - name: Install latest versions of pip and uv
        run: python -m pip install --upgrade pip uv
      - name: Install test dependencies
        run: |
          uv venv
          uv pip install $WHEEL_FILENAME[test]
      - name: Debug - uv pip freeze
        run: uv pip freeze
      - name: Test with pytest
        run: uv run pytest tests --ignore=tests/integration
      # Integration tests are slow, so only run if all other tests pass.
      - name: Test integration tests
        run: uv run pytest tests/integration
  release-github:
    name: Create GitHub draft release
    needs: test
    runs-on: ubuntu-latest
    steps:
      - run: echo TODO
